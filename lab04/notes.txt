
  ; Adds two long integers
; 1st arg = first operand address [EBP + 16]
; 2nd arg = second operand address [EBP + 12]
; 3rd arg = result operand address [EBP + 8]

; 4th arg = first operand length (in 4-byte chunks) [BL]
; 5th arg = second operand length (in 4-byte chunks) [BH]
AddLong proc
    push ebp
    mov ebp, esp

    ; Determine the length of the result
    ;mov ah, bh
    cmp bl, bh
    jl @second_arg_longer
@first_arg_longer:
    mov cl, bh
    jmp @result_length_retrieved
@second_arg_longer:
    mov cl, bl
@result_length_retrieved: ; placed in ECX       

    ; ECX will containg the smaller length
    ; We will perform addition with the common(smaller) part of args, and then with the rest
    
    ; We perform addition in 32-bit mode, so we place in ECX the amount of 32-bit chunks(how many times to perform a loop)
    ;shr ecx, 2 ; bytes => 4-bytes chunks
    ;inc ecx ; because the last chunk may have been not full and we just ignored it by shifting. So we do (floor(ecx) + 1)

    ; Retrieve args
    mov esi, [ebp + 16] ; first operand
    mov ebx, [ebp + 12] ; second operand
    mov edi, [ebp + 8] ; result

    ; Main loop
    clc
    mov edx, 0
@cycle:
    mov eax, dword ptr[esi + 4 * edx]
    adc eax, dword ptr[ebx + 4 * edx]
    mov dword ptr[edi + 4 * edx], eax

    inc edx
    dec ecx
    jnz @cycle
@cycle_finished:

    cmp bl, bh
    jl @second_arg_longer2
@first_arg_longer2:
    mov cl, bh
    jmp @result_length_retrieved2
@second_arg_longer2:
    mov cl, bl
@result_length_retrieved2:

    pop ebp
    ret 
AddLong endp